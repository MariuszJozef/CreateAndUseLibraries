#[==================================================[
SharedOrStaticLib

If BUILD_SHARED_LIBS is ON, SHARED library will be built
If BUILD_SHARED_LIBS is Off, STATIC library will be built
#]==================================================]
option(BUILD_SHARED_LIBS "OFF to build as static library, ON as dynamic" OFF)

if(BUILD_SHARED_LIBS)
    set(sharedOrStaticType shared)
else()
    set(sharedOrStaticType static)
endif()

add_library(targetSharedOrStaticLib)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

target_include_directories(targetSharedOrStaticLib 
    PRIVATE
        hdr
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

#[=========================[
N.B. 
Public headers are:
-- header files which need to be explicitly included by another application/library
-- header files which are included in the aforementioned header files.
Private header are:
-- header files which are only included in source (*.cpp, *.c) files but not in any of the public header files
-- header files included in other private header files
]=========================]

target_sources(targetSharedOrStaticLib
    PRIVATE
        hdr/SharedOrStaticLibPrivate.hpp
        src/SharedOrStaticLibPrivate.cpp
        src/SharedOrStaticLibApi.cpp
    PUBLIC 
        FILE_SET HEADERS 
        BASE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include
        FILES 
            ${CMAKE_CURRENT_SOURCE_DIR}/include/SharedOrStaticLibApi.hpp
            ${CMAKE_CURRENT_SOURCE_DIR}/include/AutoGeneratedSharedOrStaticLibExports.hpp
)

set_target_properties(targetSharedOrStaticLib
    PROPERTIES
        OUTPUT_NAME                         SharedOrStaticLibrary_${sharedOrStaticType}
        EXPORT_NAME                         SharedOrStaticLib
        DEBUG_POSTFIX                       _d
        RUNTIME_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLibNeedsCpp17/bin/$<CONFIG>
        PDB_OUTPUT_DIRECTORY                ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLibNeedsCpp17/pdb/$<CONFIG>
        LIBRARY_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLibNeedsCpp17/lib/$<CONFIG>
        ARCHIVE_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLibNeedsCpp17/lib/$<CONFIG>
        RUNTIME_OUTPUT_DIRECTORY_<Config>   ${RUNTIME_OUTPUT_DIRECTORY}
        PDB_OUTPUT_DIRECTORY_<Config>       ${PDB_OUTPUT_DIRECTORY}
        LIBRARY_OUTPUT_DIRECTORY_<Config>   ${LIBRARY_OUTPUT_DIRECTORY}
        ARCHIVE_OUTPUT_DIRECTORY_<Config>   ${ARCHIVE_OUTPUT_DIRECTORY}
)

target_compile_features(targetSharedOrStaticLib
    PUBLIC
        cxx_std_17
)

if(MSVC)

    target_compile_options(targetSharedOrStaticLib 
        PRIVATE
            /EHsc
            /W2
            # /Wall
    )

else()

    target_compile_options(targetSharedOrStaticLib 
        PRIVATE
            -Wall
            # -Wextra
            # -Wpedantic
    )

endif()

#[==================================================[
Let cmake generate proper __declspec(dllexport) and __declspec(dllexport) needed by Windows
#]==================================================]
include(GenerateExportHeader)
generate_export_header(targetSharedOrStaticLib
    EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/AutoGeneratedSharedOrStaticLibExports.hpp
    EXPORT_MACRO_NAME SHARED_OR_STATIC_LIB_API
    INCLUDE_GUARD_NAME AUTO_GENERATED_SHARED_OR_STATIC_LIB_EXPORTS_HPP
)

# This makes the static library code appear to be part of the shared library
# library as far as the generated export header is concerned
target_compile_definitions(targetSharedOrStaticLib 
    PRIVATE 
        $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:targetSharedOrStaticLib_EXPORTS>
        # $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:TARGETSHAREDORSTATICLIB_STATIC_DEFINE>
)
